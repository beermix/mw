diff --git a/src/build.cc b/src/build.cc
index db28e65..219ecec 100644
--- a/src/build.cc
+++ b/src/build.cc
@@ -160,7 +160,7 @@ void BuildStatus::BuildEdgeFinished(Edge* edge,
     // only a few hundred available on some systems, and ninja can launch
     // thousands of parallel compile commands.)
     string final_output;
-    if (!printer_.supports_color())
+    if (!printer_.is_smart_terminal() && !config_.force_color_output)
       final_output = StripAnsiEscapeCodes(output);
     else
       final_output = output;
diff --git a/src/build.h b/src/build.h
index 97773c4..0c0d7da 100644
--- a/src/build.h
+++ b/src/build.h
@@ -159,7 +159,8 @@ struct CommandRunner {
 /// Options (e.g. verbosity, parallelism) passed to a build.
 struct BuildConfig {
   BuildConfig() : verbosity(NORMAL), dry_run(false), parallelism(1),
-                  failures_allowed(1), max_load_average(-0.0f) {}
+                  failures_allowed(1), max_load_average(-0.0f),
+                  force_color_output(false) {}
 
   enum Verbosity {
     NORMAL,
@@ -173,6 +174,7 @@ struct BuildConfig {
   /// The maximum load average we must not exceed. A negative value
   /// means that we do not have any limit.
   double max_load_average;
+  bool force_color_output;
   DepfileParserOptions depfile_parser_options;
 };
 
diff --git a/src/ninja.cc b/src/ninja.cc
index 00e3a5c..6aeffe5 100644
--- a/src/ninja.cc
+++ b/src/ninja.cc
@@ -220,6 +220,7 @@ void Usage(const BuildConfig& config) {
 "  -t TOOL  run a subtool (use '-t list' to list subtools)\n"
 "    terminates toplevel options; further flags are passed to the tool\n"
 "  -w FLAG  adjust warnings (use '-w list' to list warnings)\n",
+"  -c       force using color output\n",
           kNinjaVersion, config.parallelism);
 }
 
@@ -1330,6 +1331,9 @@ int ReadFlags(int* argc, char*** argv,
       case OPT_VERSION:
         printf("%s\n", kNinjaVersion);
         return 0;
+      case 'c':
+        config->force_color_output = true;
+        return 0;
       case 'h':
       default:
         Usage(*config);
