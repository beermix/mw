# Maintainer: Mateusz Miku≈Ça <mati865@gmail.com>

_realname=compiler-rt
_mingw_suff=mingw-w64-cross
pkgname=("${_mingw_suff}-${_realname}")
pkgver=11.0.0
pkgrel=1
pkgdesc="Cross Clang for the MinGW-w64"
arch=('i686' 'x86_64')
url="https://llvm.org"
license=('custom:Apache 2.0 with LLVM Exception')
depends=('clang')
makedepends=("cmake" "ninja" "${_mingw_suff}-headers")
options=('!strip' 'staticlibs' '!emptydirs' '!buildflags')
_url=https://github.com/llvm/llvm-project/releases/download/llvmorg-${pkgver}
source=(${_url}/compiler-rt-${pkgver}.src.tar.xz)
sha256sums=('374aff82ff573a449f9aabbd330a5d0a441181c535a3599996127378112db234'
            'SKIP')
validpgpkeys=('B6C8F98282B944E3B0D5C2530FC3042E345AD05D'  # Hans Wennborg, Google.
              '474E22316ABF4785A88C6E8EA2C794A986419D8A') # Tom Stellard

_target="x86_64-w64-mingw32"

prepare() {
  cd ${srcdir}
}

build() {
  cd "${srcdir}"

  [[ -d build-${CARCH} ]] && rm -rf build-${CARCH}
  mkdir build-${CARCH} && cd build-${CARCH}

  export CC="clang" CXX="clang++" AS="clang" AR="llvm-ar" RANLIB="llvm-ranlib" DLLTOOL="llvm-dlltool" LD="clang"

  CFLAGS+=" -target ${_target} --sysroot=/opt/${_target}"
  CPPFLAGS+=" -target ${_target} --sysroot=/opt/${_target}"
  CXXFLAGS+=" -target ${_target} --sysroot=/opt/${_target}"
  LDFLAGS+=" -target ${_target} --sysroot=/opt/${_target} -fuse-ld=lld"

  cmake \
    -G'Ninja' \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_COMPILER_TARGET=${CARCH}-windows-gnu \
    -DLLVM_TARGETS_TO_BUILD="X86" \
    -DCMAKE_C_COMPILER_WORKS=ON \
    -DCMAKE_CXX_COMPILER_WORKS=ON \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_SIZEOF_VOID_P=8 \
    -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib \
    -DCMAKE_SYSTEM_NAME=Windows \
    -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
    -DCOMPILER_RT_BUILD_PROFILE=OFF \
    -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
    -DCOMPILER_RT_BUILD_XRAY=OFF \
    -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    ../${_realname}-${pkgver}.src

  ninja
}

package() {
  cd $srcdir/build-${CARCH}

  # ninja install needs working compiler detection to find correct directory
  mkdir -p "${pkgdir}/usr/lib/clang/${pkgver}/lib/windows"
  cp "lib/windows/libclang_rt.builtins-${CARCH}.a" "${pkgdir}/usr/lib/clang/${pkgver}/lib/windows"
}
