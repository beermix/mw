# Maintainer: Martell Malone <martellmalone@gmail.com>
# https://download.qemu.org/?C=M;O=D

_realname=qemu
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
_base_ver=5.2.0
_rc=-rc3
#pkgver=${_base_ver}${_rc//-/.}
pkgver=${_base_ver}
pkgrel=2
pkgdesc="A generic and open source processor emulator (mingw-w64)"
arch=('any')
license=('GPL2' 'LGPL2')
url="https://qemu.org/"
makedepends=("${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-python"
             'perl' 'bison' 'bsdtar')
depends=("${MINGW_PACKAGE_PREFIX}-capstone"
         "${MINGW_PACKAGE_PREFIX}-curl"
         "${MINGW_PACKAGE_PREFIX}-cyrus-sasl"
         "${MINGW_PACKAGE_PREFIX}-glib2"
         "${MINGW_PACKAGE_PREFIX}-gnutls"
         "${MINGW_PACKAGE_PREFIX}-gtk3"
         "${MINGW_PACKAGE_PREFIX}-libjpeg"
         "${MINGW_PACKAGE_PREFIX}-libpng"
         "${MINGW_PACKAGE_PREFIX}-libssh"
         "${MINGW_PACKAGE_PREFIX}-libtasn1"
         "${MINGW_PACKAGE_PREFIX}-libusb"
         "${MINGW_PACKAGE_PREFIX}-libxml2"
         "${MINGW_PACKAGE_PREFIX}-lzo2"
         "${MINGW_PACKAGE_PREFIX}-nettle"
         "${MINGW_PACKAGE_PREFIX}-pixman"
         "${MINGW_PACKAGE_PREFIX}-snappy"
         "${MINGW_PACKAGE_PREFIX}-SDL2"
         "${MINGW_PACKAGE_PREFIX}-SDL2_image"
         "${MINGW_PACKAGE_PREFIX}-libslirp"
         "${MINGW_PACKAGE_PREFIX}-usbredir"
         "${MINGW_PACKAGE_PREFIX}-zstd")
source=(https://download.qemu.org/${_realname}-${pkgver}${_rc}.tar.xz)
sha256sums=('2f13a92a0fa5c8b69ff0796b59b86b080bbb92ebad5d301a7724dd06b5e78cb6'
            'SKIP')
validpgpkeys=('CEACC9E15534EBABB82D3FA03353C9CEF108B584') # Michael Roth <flukshun@gmail.com>
noextract=(${_realname}-${pkgver}${_rc}.tar.xz)

prepare() {
  [[ -d "${srcdir}"/${_realname}-${pkgver}${_rc} ]] && rm -rf "${srcdir}"/${_realname}-${pkgver}${_rc}
  tar -xJf ${srcdir}/${_realname}-${pkgver}${_rc}.tar.xz -C ${srcdir} || true

  cd "${srcdir}/${_realname}-${pkgver}${_rc}"
}

build() {
  LDFLAGS+=" -fstack-protector"

  local -a _extra_config
  if [[ "$CARCH" = 'x86_64' ]]; then
    _extra_config+=("--enable-whpx")
  fi

  [[ -d "${srcdir}"/build-${CARCH} ]] && rm -rf "${srcdir}"/build-${CARCH}
  mkdir -p "${srcdir}"/build-${CARCH} && cd "${srcdir}"/build-${CARCH}

  #export CC='ccache gcc'
  #export CXX='ccache g++'

  ../${_realname}-${pkgver}${_rc}/configure \
      --disable-werror \
      --disable-kvm \
      --disable-spice \
      --disable-libnfs \
      --enable-capstone=system \
      --enable-gnutls \
      --enable-libssh \
      --enable-lzo \
      --enable-nettle \
      --enable-slirp=system \
      --enable-snappy \
      --enable-hax \
      --enable-gtk \
      --enable-sdl \
      --enable-zstd \
      --ninja=${MINGW_PREFIX}/bin/ninja \
      "${_extra_config[@]}" \
      --prefix=${MINGW_PREFIX} \
      --bindir=${MINGW_PREFIX}/bin \
      --datadir=${MINGW_PREFIX}/bin \
      --firmwarepath=${MINGW_PREFIX}/etc/qemu \
      --python=${MINGW_PREFIX}/bin/python \
      --mandir=${MINGW_PREFIX}/share/qemu \
      --docdir=${MINGW_PREFIX}/share/qemu

  /home/User/.bin/noti.exe --time nice -n19 make -j8
}

package() {
  cd "${srcdir}"/build-${CARCH}
  DESTDIR="${pkgdir}/" ninja install
}
